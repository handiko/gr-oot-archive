#!/usr/bin/env python

from gnuradio import analog
from gnuradio import eng_notation
from gnuradio import filter
from gnuradio import gr
from gnuradio.eng_option import eng_option
from gnuradio.filter import firdes
from optparse import OptionParser, OptionGroup
import igate
import osmosdr
import time

class aprs_igate(gr.top_block):
    def __init__(self, options):
        gr.top_block.__init__(self, "APRS igate")

        self.d_options = options

        self.sink_inet = igate.aprs_is_sink(
            self.d_options.host,
            self.d_options.port,
            self.d_options.callsign,
            self.d_options.password,
            'gr-igate',
            igate.meta.version()
        )

        src_ident = self._setup_source()
        rx_ident = self._setup_air_to_inet(src_ident)
        self.msg_connect(rx_ident, (self.sink_inet, 'in'))

        if self.d_options.interval:
            beacon_ident = self._setup_beacon()
            self.msg_connect(beacon_ident, (self.sink_inet, 'in'))

    def _setup_beacon(self):
        self.beacon_src = igate.aprs_pkt_gen(
            self.d_options.interval,
            self.d_options.callsign,
            self.d_options.destination,
            self.d_options.path,
            240, #pid
            3, #ctrl
            self.d_options.info
            )
        return (self.beacon_src, 'out')

    def _setup_air_to_inet(self, src_ident):
        # Skip third party packets
        self.rx_thirdparty_filter = igate.aprs_info_filter('^[^}]')
        self.msg_connect(src_ident, (self.rx_thirdparty_filter, 'in'))

        self.rx_nogate_filter = igate.aprs_path_filter('^(NOGATE|RFONLY)', True, True)
        self.msg_connect((self.rx_thirdparty_filter, 'out'), (self.rx_nogate_filter, 'in'))

        self.rx_path_append = igate.aprs_append_path('qAR,'+self.d_options.callsign)
        self.msg_connect((self.rx_nogate_filter, 'out'), (self.rx_path_append, 'in'))

        return (self.rx_path_append, 'out')

    def _setup_source(self):
        af_samp_rate = 9600
        if_samp_rate = af_samp_rate*2
        rf_samp_rate = if_samp_rate*48

        freq_offset = 100000
        freq = self.d_options.frequency

        self.src_rf_src = osmosdr.source( args = self.d_options.args )
        self.src_rf_src.set_sample_rate( rf_samp_rate )
        self.src_rf_src.set_center_freq( freq+freq_offset, 0)
        self.src_rf_src.set_gain_mode(True, 0)
        self.src_rf_src.set_gain(34, 0)

        channel_taps = firdes.low_pass(1, rf_samp_rate, 12500, 2000)
        self.src_channel_filter = filter.freq_xlating_fft_filter_ccc(
            rf_samp_rate/if_samp_rate,
            channel_taps,
            -freq_offset,
            rf_samp_rate
            )

        # We don't care about gain, since we're going to FM-demodulate it again
        self.src_fm_demod = analog.quadrature_demod_cf(1.0)
        self.src_aprs_demod = igate.aprs_demod(if_samp_rate)

        self.connect((self.src_rf_src, 0), (self.src_channel_filter, 0))
        self.connect((self.src_channel_filter, 0), (self.src_fm_demod, 0))
        self.connect((self.src_fm_demod, 0), (self.src_aprs_demod, 0))

        return (self.src_aprs_demod, 'out')

def add_options(parser):
    group = OptionGroup(parser, "Global options")
    group.add_option("-c", "--callsign", type="string", default=None,
        help="Callsign and ssid [default=%default]")
    parser.add_option_group(group)

    group = OptionGroup(parser, "Receiver options")
    group.add_option("-f", "--frequency", type="eng_float", default=144.8e6,
                   help="Frequency of APRS channel [default=%default]")
    group.add_option("-a", "--args", type="string", default="",
                   help="Arguments for osmocom source block [default=%default]")
    parser.add_option_group(group)

    group = OptionGroup(parser, "Beacon options")
    group.add_option("-t", "--interval", type="eng_float", default=None,
                   help="Beacon interval [default=%default]")
    group.add_option("-d", "--destination", type="string", default="APZ124",
                   help="Destination callsign and ssid [default=%default]")
    group.add_option("-p", "--path", type="string", default="",
                   help="Path as comma separated list [default=%default]")
    group.add_option("-i", "--info", type="string", default=None,
                   help="Beacon info string [default=%default]")
    parser.add_option_group(group)

    group = OptionGroup(parser, "APRS-IS")
    group.add_option("-H", "--host", type="string", default="rotate.aprs2.net",
                   help="APRS-IS server [default=%default]")
    group.add_option("-P", "--port", type="int", default=14580,
                   help="APRS-IS server [default=%default]")
    group.add_option("-X", "--password", type="int", default=None,
                   help="Password [default=%default]")
    parser.add_option_group(group)



if __name__ == '__main__':
    parser = OptionParser (option_class=eng_option, conflict_handler="resolve")
    add_options(parser)
    (options, args) = parser.parse_args ()

    tb = aprs_igate(options)
    tb.start()
    tb.wait()
